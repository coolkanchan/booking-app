{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 8, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 70, "column": 0}, "map": {"version":3,"sources":["file:///Users/mercelvubangsi/Documents/MY%20DOCS/MIU/STUDIES/CS425%20SWE/PROJECT/new/frontend/src/lib/mongodb.ts"],"sourcesContent":["import { MongoClient } from 'mongodb';\n\nconst uri = process.env.MONGODB_URI || 'mongodb://localhost:27017';\nconst dbName = process.env.MONGODB_DB || 'flight-booking';\n\nlet cachedClient: MongoClient;\nlet cachedDb: any;\n\nexport async function connectToDatabase() {\n  if (cachedClient && cachedDb) {\n    return { client: cachedClient, db: cachedDb };\n  }\n\n  const client = new MongoClient(uri);\n  await client.connect();\n  const db = client.db(dbName);\n\n  cachedClient = client;\n  cachedDb = db;\n\n  return { client, db };\n}"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,MAAM,QAAQ,GAAG,CAAC,WAAW,IAAI;AACvC,MAAM,SAAS,QAAQ,GAAG,CAAC,UAAU,IAAI;AAEzC,IAAI;AACJ,IAAI;AAEG,eAAe;IACpB,IAAI,gBAAgB,UAAU;QAC5B,OAAO;YAAE,QAAQ;YAAc,IAAI;QAAS;IAC9C;IAEA,MAAM,SAAS,IAAI,uGAAA,CAAA,cAAW,CAAC;IAC/B,MAAM,OAAO,OAAO;IACpB,MAAM,KAAK,OAAO,EAAE,CAAC;IAErB,eAAe;IACf,WAAW;IAEX,OAAO;QAAE;QAAQ;IAAG;AACtB","debugId":null}},
    {"offset": {"line": 96, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 102, "column": 0}, "map": {"version":3,"sources":["file:///Users/mercelvubangsi/Documents/MY%20DOCS/MIU/STUDIES/CS425%20SWE/PROJECT/new/frontend/src/app/api/flights/route.ts"],"sourcesContent":["import { NextResponse } from 'next/server';\nimport { connectToDatabase } from '../../../lib/mongodb';\nimport { ObjectId } from 'mongodb';\n\n// GET: Fetch flights\nexport async function GET(request: Request) {\n  const { searchParams } = new URL(request.url);\n  const flightId = searchParams.get('id'); // Get flight ID from query parameters\n  const origin = searchParams.get('origin');\n  const destination = searchParams.get('destination');\n  const departureDate = searchParams.get('departureDate');\n\n  const { db } = await connectToDatabase();\n\n  try {\n    // If a flight ID is provided, return the specific flight\n    if (flightId) {\n      const flight = await db.collection('flights').findOne({ _id: new ObjectId(flightId) });\n      return flight\n        ? NextResponse.json(flight)\n        : NextResponse.json({ error: 'Flight not found' }, { status: 404 });\n    }\n\n    // Build the query based on filters\n    const query: any = {};\n    if (origin && destination) {\n      query.origin = origin;\n      query.destination = destination;\n    }\n    if (departureDate) {\n      query.departure = departureDate;\n    }\n\n    // Fetch filtered flights\n    const flights = await db.collection('flights').find(query).toArray();\n    return NextResponse.json(flights);\n  } catch (error) {\n    console.error('Error fetching flights:', error);\n    return NextResponse.json({ error: 'Failed to fetch flights' }, { status: 500 });\n  }\n}\n\n// POST: Create a new flight\nexport async function POST(request: Request) {\n  const { flightNumber, airline, origin, destination, departure, arrival, duration, price, seatsAvailable } =\n    await request.json();\n\n  if (\n    !flightNumber ||\n    !airline ||\n    !origin ||\n    !destination ||\n    !departure ||\n    !arrival ||\n    !duration ||\n    !price ||\n    !seatsAvailable\n  ) {\n    return NextResponse.json({ error: 'All fields are required' }, { status: 400 });\n  }\n\n  const { db } = await connectToDatabase();\n\n  try {\n    const result = await db.collection('flights').insertOne({\n      flightNumber,\n      airline,\n      origin,\n      destination,\n      departure: new Date(departure),\n      arrival: new Date(arrival),\n      duration,\n      price,\n      seatsAvailable,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    });\n\n    return NextResponse.json({ message: 'Flight created successfully', flightId: result.insertedId });\n  } catch (error) {\n    console.error('Error creating flight:', error);\n    return NextResponse.json({ error: 'Failed to create flight' }, { status: 500 });\n  }\n}\n\n// PUT: Update a flight\nexport async function PUT(request: Request) {\n  const { flightId, flightNumber, airline, origin, destination, departure, arrival, duration, price, seatsAvailable } =\n    await request.json();\n\n  if (!flightId) {\n    return NextResponse.json({ error: 'Flight ID is required' }, { status: 400 });\n  }\n\n  const { db } = await connectToDatabase();\n\n  try {\n    const result = await db.collection('flights').updateOne(\n      { _id: new ObjectId(flightId) },\n      {\n        $set: {\n          flightNumber,\n          airline,\n          origin,\n          destination,\n          departure: new Date(departure),\n          arrival: new Date(arrival),\n          duration,\n          price,\n          seatsAvailable,\n          updatedAt: new Date(),\n        },\n      }\n    );\n\n    if (result.matchedCount === 0) {\n      return NextResponse.json({ error: 'Flight not found' }, { status: 404 });\n    }\n\n    return NextResponse.json({ message: 'Flight updated successfully' });\n  } catch (error) {\n    console.error('Error updating flight:', error);\n    return NextResponse.json({ error: 'Failed to update flight' }, { status: 500 });\n  }\n}\n\n// DELETE: Delete a flight\nexport async function DELETE(request: Request) {\n  const { flightId } = await request.json();\n\n  if (!flightId) {\n    return NextResponse.json({ error: 'Flight ID is required' }, { status: 400 });\n  }\n\n  const { db } = await connectToDatabase();\n\n  try {\n    const result = await db.collection('flights').deleteOne({ _id: new ObjectId(flightId) });\n\n    if (result.deletedCount === 0) {\n      return NextResponse.json({ error: 'Flight not found' }, { status: 404 });\n    }\n\n    return NextResponse.json({ message: 'Flight deleted successfully' });\n  } catch (error) {\n    console.error('Error deleting flight:', error);\n    return NextResponse.json({ error: 'Failed to delete flight' }, { status: 500 });\n  }\n}"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 270, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}