{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 8, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 70, "column": 0}, "map": {"version":3,"sources":["file:///Users/mercelvubangsi/Documents/MY%20DOCS/MIU/STUDIES/CS425%20SWE/PROJECT/new/frontend/src/lib/mongodb.ts"],"sourcesContent":["import { MongoClient } from 'mongodb';\n\nconst uri = process.env.MONGODB_URI || 'mongodb://localhost:27017';\nconst dbName = process.env.MONGODB_DB || 'flight-booking';\n\nlet cachedClient: MongoClient;\nlet cachedDb: any;\n\nexport async function connectToDatabase() {\n  if (cachedClient && cachedDb) {\n    return { client: cachedClient, db: cachedDb };\n  }\n\n  const client = new MongoClient(uri);\n  await client.connect();\n  const db = client.db(dbName);\n\n  cachedClient = client;\n  cachedDb = db;\n\n  return { client, db };\n}"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,MAAM,QAAQ,GAAG,CAAC,WAAW,IAAI;AACvC,MAAM,SAAS,QAAQ,GAAG,CAAC,UAAU,IAAI;AAEzC,IAAI;AACJ,IAAI;AAEG,eAAe;IACpB,IAAI,gBAAgB,UAAU;QAC5B,OAAO;YAAE,QAAQ;YAAc,IAAI;QAAS;IAC9C;IAEA,MAAM,SAAS,IAAI,uGAAA,CAAA,cAAW,CAAC;IAC/B,MAAM,OAAO,OAAO;IACpB,MAAM,KAAK,OAAO,EAAE,CAAC;IAErB,eAAe;IACf,WAAW;IAEX,OAAO;QAAE;QAAQ;IAAG;AACtB","debugId":null}},
    {"offset": {"line": 96, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 102, "column": 0}, "map": {"version":3,"sources":["file:///Users/mercelvubangsi/Documents/MY%20DOCS/MIU/STUDIES/CS425%20SWE/PROJECT/new/frontend/src/app/api/flights/%5Bid%5D/route.ts"],"sourcesContent":["import { NextResponse } from 'next/server';\nimport { connectToDatabase } from '../../../../lib/mongodb';\nimport { ObjectId } from 'mongodb';\n\n// GET: Fetch a specific flight by ID\nexport async function GET(request: Request, { params }: { params: { id: string } }) {\n  const { id } = params;\n\n  // Validate the flight ID\n  if (!id || typeof id !== 'string') {\n    return NextResponse.json({ error: 'Invalid flight ID' }, { status: 400 });\n  }\n\n  const { db } = await connectToDatabase();\n\n  try {\n    // Fetch the flight by ID\n    const flight = await db.collection('flights').findOne({ _id: new ObjectId(id) });\n\n    // If flight is not found, return a 404 error\n    if (!flight) {\n      return NextResponse.json({ error: 'Flight not found' }, { status: 404 });\n    }\n\n    // Return the flight data\n    return NextResponse.json(flight);\n  } catch (error) {\n    console.error('Error fetching flight:', error);\n    return NextResponse.json({ error: 'Failed to fetch flight' }, { status: 500 });\n  }\n}\n\n// PUT: Update a specific flight by ID\nexport async function PUT(request: Request, { params }: { params: { id: string } }) {\n  const { id } = params;\n  const { flightNumber, airline, origin, destination, departure, arrival, duration, price, seatsAvailable } =\n    await request.json();\n\n  // Validate the flight ID\n  if (!id || typeof id !== 'string') {\n    return NextResponse.json({ error: 'Invalid flight ID' }, { status: 400 });\n  }\n\n  const { db } = await connectToDatabase();\n\n  try {\n    // Update the flight\n    const result = await db.collection('flights').updateOne(\n      { _id: new ObjectId(id) },\n      {\n        $set: {\n          flightNumber,\n          airline,\n          origin,\n          destination,\n          departure: new Date(departure),\n          arrival: new Date(arrival),\n          duration,\n          price,\n          seatsAvailable,\n          updatedAt: new Date(),\n        },\n      }\n    );\n\n    // If no flight was matched, return a 404 error\n    if (result.matchedCount === 0) {\n      return NextResponse.json({ error: 'Flight not found' }, { status: 404 });\n    }\n\n    // Return success message\n    return NextResponse.json({ message: 'Flight updated successfully' });\n  } catch (error) {\n    console.error('Error updating flight:', error);\n    return NextResponse.json({ error: 'Failed to update flight' }, { status: 500 });\n  }\n}\n\n// DELETE: Delete a specific flight by ID\nexport async function DELETE(request: Request, { params }: { params: { id: string } }) {\n  const { id } = params;\n\n  // Validate the flight ID\n  if (!id || typeof id !== 'string') {\n    return NextResponse.json({ error: 'Invalid flight ID' }, { status: 400 });\n  }\n\n  const { db } = await connectToDatabase();\n\n  try {\n    // Delete the flight\n    const result = await db.collection('flights').deleteOne({ _id: new ObjectId(id) });\n\n    // If no flight was deleted, return a 404 error\n    if (result.deletedCount === 0) {\n      return NextResponse.json({ error: 'Flight not found' }, { status: 404 });\n    }\n\n    // Return success message\n    return NextResponse.json({ message: 'Flight deleted successfully' });\n  } catch (error) {\n    console.error('Error deleting flight:', error);\n    return NextResponse.json({ error: 'Failed to delete flight' }, { status: 500 });\n  }\n}"],"names":[],"mappings":";;;;;AAAA;AACA;AACA;;;;AAGO,eAAe,IAAI,OAAgB,EAAE,EAAE,MAAM,EAA8B;IAChF,MAAM,EAAE,EAAE,EAAE,GAAG;IAEf,yBAAyB;IACzB,IAAI,CAAC,MAAM,OAAO,OAAO,UAAU;QACjC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAoB,GAAG;YAAE,QAAQ;QAAI;IACzE;IAEA,MAAM,EAAE,EAAE,EAAE,GAAG,MAAM,CAAA,GAAA,uHAAA,CAAA,oBAAiB,AAAD;IAErC,IAAI;QACF,yBAAyB;QACzB,MAAM,SAAS,MAAM,GAAG,UAAU,CAAC,WAAW,OAAO,CAAC;YAAE,KAAK,IAAI,uGAAA,CAAA,WAAQ,CAAC;QAAI;QAE9E,6CAA6C;QAC7C,IAAI,CAAC,QAAQ;YACX,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAmB,GAAG;gBAAE,QAAQ;YAAI;QACxE;QAEA,yBAAyB;QACzB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;IAC3B,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,0BAA0B;QACxC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAyB,GAAG;YAAE,QAAQ;QAAI;IAC9E;AACF;AAGO,eAAe,IAAI,OAAgB,EAAE,EAAE,MAAM,EAA8B;IAChF,MAAM,EAAE,EAAE,EAAE,GAAG;IACf,MAAM,EAAE,YAAY,EAAE,OAAO,EAAE,MAAM,EAAE,WAAW,EAAE,SAAS,EAAE,OAAO,EAAE,QAAQ,EAAE,KAAK,EAAE,cAAc,EAAE,GACvG,MAAM,QAAQ,IAAI;IAEpB,yBAAyB;IACzB,IAAI,CAAC,MAAM,OAAO,OAAO,UAAU;QACjC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAoB,GAAG;YAAE,QAAQ;QAAI;IACzE;IAEA,MAAM,EAAE,EAAE,EAAE,GAAG,MAAM,CAAA,GAAA,uHAAA,CAAA,oBAAiB,AAAD;IAErC,IAAI;QACF,oBAAoB;QACpB,MAAM,SAAS,MAAM,GAAG,UAAU,CAAC,WAAW,SAAS,CACrD;YAAE,KAAK,IAAI,uGAAA,CAAA,WAAQ,CAAC;QAAI,GACxB;YACE,MAAM;gBACJ;gBACA;gBACA;gBACA;gBACA,WAAW,IAAI,KAAK;gBACpB,SAAS,IAAI,KAAK;gBAClB;gBACA;gBACA;gBACA,WAAW,IAAI;YACjB;QACF;QAGF,+CAA+C;QAC/C,IAAI,OAAO,YAAY,KAAK,GAAG;YAC7B,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAmB,GAAG;gBAAE,QAAQ;YAAI;QACxE;QAEA,yBAAyB;QACzB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,SAAS;QAA8B;IACpE,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,0BAA0B;QACxC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAA0B,GAAG;YAAE,QAAQ;QAAI;IAC/E;AACF;AAGO,eAAe,OAAO,OAAgB,EAAE,EAAE,MAAM,EAA8B;IACnF,MAAM,EAAE,EAAE,EAAE,GAAG;IAEf,yBAAyB;IACzB,IAAI,CAAC,MAAM,OAAO,OAAO,UAAU;QACjC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAoB,GAAG;YAAE,QAAQ;QAAI;IACzE;IAEA,MAAM,EAAE,EAAE,EAAE,GAAG,MAAM,CAAA,GAAA,uHAAA,CAAA,oBAAiB,AAAD;IAErC,IAAI;QACF,oBAAoB;QACpB,MAAM,SAAS,MAAM,GAAG,UAAU,CAAC,WAAW,SAAS,CAAC;YAAE,KAAK,IAAI,uGAAA,CAAA,WAAQ,CAAC;QAAI;QAEhF,+CAA+C;QAC/C,IAAI,OAAO,YAAY,KAAK,GAAG;YAC7B,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAmB,GAAG;gBAAE,QAAQ;YAAI;QACxE;QAEA,yBAAyB;QACzB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,SAAS;QAA8B;IACpE,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,0BAA0B;QACxC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAA0B,GAAG;YAAE,QAAQ;QAAI;IAC/E;AACF","debugId":null}},
    {"offset": {"line": 236, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}