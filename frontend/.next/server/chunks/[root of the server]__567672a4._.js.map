{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 8, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 70, "column": 0}, "map": {"version":3,"sources":["file:///Users/mercelvubangsi/Documents/MY%20DOCS/MIU/STUDIES/CS425%20SWE/PROJECT/new/frontend/src/lib/mongodb.ts"],"sourcesContent":["import { MongoClient } from 'mongodb';\n\nconst uri = process.env.MONGODB_URI || 'mongodb://localhost:27017';\nconst dbName = process.env.MONGODB_DB || 'flight-booking';\n\nlet cachedClient: MongoClient;\nlet cachedDb: any;\n\nexport async function connectToDatabase() {\n  if (cachedClient && cachedDb) {\n    return { client: cachedClient, db: cachedDb };\n  }\n\n  const client = new MongoClient(uri);\n  await client.connect();\n  const db = client.db(dbName);\n\n  cachedClient = client;\n  cachedDb = db;\n\n  return { client, db };\n}"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,MAAM,QAAQ,GAAG,CAAC,WAAW,IAAI;AACvC,MAAM,SAAS,QAAQ,GAAG,CAAC,UAAU,IAAI;AAEzC,IAAI;AACJ,IAAI;AAEG,eAAe;IACpB,IAAI,gBAAgB,UAAU;QAC5B,OAAO;YAAE,QAAQ;YAAc,IAAI;QAAS;IAC9C;IAEA,MAAM,SAAS,IAAI,uGAAA,CAAA,cAAW,CAAC;IAC/B,MAAM,OAAO,OAAO;IACpB,MAAM,KAAK,OAAO,EAAE,CAAC;IAErB,eAAe;IACf,WAAW;IAEX,OAAO;QAAE;QAAQ;IAAG;AACtB","debugId":null}},
    {"offset": {"line": 96, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 102, "column": 0}, "map": {"version":3,"sources":["file:///Users/mercelvubangsi/Documents/MY%20DOCS/MIU/STUDIES/CS425%20SWE/PROJECT/new/frontend/src/app/api/bookings/route.ts"],"sourcesContent":["import { NextResponse } from 'next/server';\nimport { connectToDatabase } from '../../../lib/mongodb';\n\n// GET: Fetch all bookings\nexport async function GET() {\n  const { db } = await connectToDatabase();\n\n  try {\n    const bookings = await db.collection('bookings').find({}).toArray();\n    return NextResponse.json(bookings);\n  } catch (error) {\n    console.error('Error fetching bookings:', error);\n    return NextResponse.json({ error: 'Failed to fetch bookings' }, { status: 500 });\n  }\n}\n\n// POST: Create a new booking\nexport async function POST(request: Request) {\n  const { userId, flightId, fareType, extras, seatNumber, totalPrice, paymentStatus } = await request.json();\n\n  if (!userId || !flightId || !fareType || !seatNumber || !totalPrice || !paymentStatus) {\n    return NextResponse.json({ error: 'Missing required fields' }, { status: 400 });\n  }\n\n  const { db } = await connectToDatabase();\n\n  try {\n    const result = await db.collection('bookings').insertOne({\n      user: userId,\n      flight: flightId,\n      fareType,\n      extras,\n      seatNumber,\n      totalPrice,\n      paymentStatus,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    });\n\n    return NextResponse.json({ message: 'Booking created successfully', bookingId: result.insertedId });\n  } catch (error) {\n    console.error('Error creating booking:', error);\n    return NextResponse.json({ error: 'Failed to create booking' }, { status: 500 });\n  }\n}\n\n// PUT: Update a booking\nexport async function PUT(request: Request) {\n  const { bookingId, fareType, extras, seatNumber, totalPrice, paymentStatus } = await request.json();\n\n  if (!bookingId) {\n    return NextResponse.json({ error: 'Booking ID is required' }, { status: 400 });\n  }\n\n  const { db } = await connectToDatabase();\n\n  try {\n    const result = await db.collection('bookings').updateOne(\n      { _id: new ObjectId(bookingId) },\n      { $set: { fareType, extras, seatNumber, totalPrice, paymentStatus, updatedAt: new Date() } }\n    );\n\n    if (result.matchedCount === 0) {\n      return NextResponse.json({ error: 'Booking not found' }, { status: 404 });\n    }\n\n    return NextResponse.json({ message: 'Booking updated successfully' });\n  } catch (error) {\n    console.error('Error updating booking:', error);\n    return NextResponse.json({ error: 'Failed to update booking' }, { status: 500 });\n  }\n}\n\n// DELETE: Delete a booking\nexport async function DELETE(request: Request) {\n  const { bookingId } = await request.json();\n\n  if (!bookingId) {\n    return NextResponse.json({ error: 'Booking ID is required' }, { status: 400 });\n  }\n\n  const { db } = await connectToDatabase();\n\n  try {\n    const result = await db.collection('bookings').deleteOne({ _id: new ObjectId(bookingId) });\n\n    if (result.deletedCount === 0) {\n      return NextResponse.json({ error: 'Booking not found' }, { status: 404 });\n    }\n\n    return NextResponse.json({ message: 'Booking deleted successfully' });\n  } catch (error) {\n    console.error('Error deleting booking:', error);\n    return NextResponse.json({ error: 'Failed to delete booking' }, { status: 500 });\n  }\n}"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 236, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}